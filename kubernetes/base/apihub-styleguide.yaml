id: apihub-styleguide
mime_types:
- application/x.openapi+gzip;version=3
- application/x.openapi+gzip;version=2
guidelines:
- id: Operation
  display_name: Govern properties of Operations
  rules:
  - id: OperationIdValidInURL
    description: >
      Seeing as operationId is often used for unique URLs in
      documentation systems, it's a good idea to avoid non-URL
      safe characters."
    linter: spectral
    linter_rulename: operation-operationId-valid-in-url
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-operationid-valid-in-url
  - id: OperationTagsDefined
    description: Operation tags should be defined in global tags.
    linter: spectral
    linter_rulename: operation-tag-defined
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-tag-defined
  - id: OperationSuccessResponse
    description: >
      Operation must have at least one 2xx or 3xx response.
      Any API operation (endpoint) can fail, but presumably
      it is also meant to do something constructive at some point.
      If you forget to write out a success case for this API,
      then this rule will let you know.
    linter: spectral
    linter_rulename: operation-success-response
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-success-response
  - id: OperationDescriptionPresent
    description: Operation "description" must be present and non-empty string.
    linter: spectral
    linter_rulename: operation-operationId-valid-in-url
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-description
  - id: OperationNonEmptyTags
    description: Operation should have non-empty tags array.
    linter: spectral
    linter_rulename: operation-tags
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-tags
  - id: OperationIdUnique
    description: Every operation must have a unique operationId.
    linter: spectral
    linter_rulename: operation-operationId-unique
    severity: ERROR
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-operationid-unique
  - id: OperationId
    description: Operation must have "operationId"."
    linter: spectral
    linter_rulename: operation-operationId
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-operationid
  - id: OperationParameters
    description: >
      Operation parameters are unique and non-repeating.
      1. Operations must have unique name + in parameters.
      2. Operation cannot have both in: body and in: formData parameters. (OpenAPI v2.0)
      3. Operation must have only one in: body parameter. (OpenAPI v2.0)
    linter: spectral
    linter_rulename: operation-parameters
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#operation-parameters
  status: ACTIVE
- id: Info
  display_name: Govern properties of Info
  rules:
  - id: InfoContactRequired
    description: >
      Info object must have "contact" object.
      Hopefully your API description document is so good that nobody ever
      needs to contact you with questions, but that is rarely the case.
      The contact object has a few different options for contact details.
    linter: spectral
    linter_rulename: info-contact
    severity: ERROR
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#info-contact
  - id: InfoDescriptionRequired
    description: >
      OpenAPI object info description must be present and non-empty string.
      Examples can contain Markdown so you can really go to town with them,
      implementing getting started information like where to find authentication
      keys, and how to use them.
    linter: spectral
    linter_rulename: info-description
    severity: ERROR
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#info-description
  - id: InfoLicenseRecommended
    description: >
      The info object should have a license key.
      It can be hard to pick a license, so if you don't have a lawyer around
      you can use TLDRLegal and Choose a License to help give you an idea.
      How useful this is in court is not entirely known, but having a license
      is better than not having a license.
    linter: spectral
    linter_rulename: info-license
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#info-license
  status: ACTIVE
- id: Markdown
  display_name: Govern properties of Markdown
  rules:
  - id: NoEvalInMarkdown
    description: >
      Markdown descriptions must not have "eval(".
      This rule protects against an edge case, for anyone bringing in description
      documents from third parties and using the parsed content rendered in HTML/JS.
      If one of those third parties does something shady like inject eval() JavaScript
      statements, it could lead to an XSS attack.
    linter: spectral
    linter_rulename: no-eval-in-markdown
    severity: ERROR
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#no-eval-in-markdown
  - id: NoScriptTagsInMarkdown
    description: >
      Markdown descriptions must not have "<script>" tags.
      This rule protects against a potential hack, for anyone bringing in description
      documents from third parties then generating HTML documentation. If one of those
      third parties does something shady like inject <script> tags, they could easily
      execute arbitrary code on your domain, which if it's the same as your main
      application could be all sorts of terrible.
    linter: spectral
    linter_rulename: no-script-tags-in-markdown
    severity: ERROR
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#no-script-tags-in-markdown
  status: ACTIVE
- id: Path
  display_name: Govern properties of Paths
  rules:
  - id: PathParams
    description: >
      Path parameters are correct and valid.
      1. For every parameters referenced in the path string (i.e: /users/{userId}),
         the parameter must be defined in either path.parameters, or operation.parameters objects
         (Non standard HTTP operations will be silently ignored.)
      2. every path.parameters and operation.parameters parameter must be used in the path string.
    linter: spectral
    linter_rulename: path-params
    severity: ERROR
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#path-params
  - id: PathKeysNoTrailingSlash
    description: >
      Keep trailing slashes off of paths, as it can cause some confusion. Some web
      tooling (like mock servers, real servers, code generators, application frameworks, etc.)
      will treat example.com/foo and example.com/foo/ as the same thing, but other
      tooling will not. Avoid any confusion by just documenting them without the slash,
      and maybe some tooling will let people shove a / on there when they're using it
      or maybe not, but at least the docs are suggesting how it should be done properly.
    linter: spectral
    linter_rulename: path-keys-no-trailing-slash
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#path-keys-no-trailing-slash
  - id: PathKeysNoTrailingSlash
    description: Path parameter declarations cannot be empty, ex./given/{} is invalid.
    linter: spectral
    linter_rulename: path-declarations-must-exist
    severity: WARNING
    doc_uri: https://meta.stoplight.io/docs/spectral/ZG9jOjExNw-open-api-rules#path-declarations-must-exist
  status: ACTIVE
linters:
- name: spectral
  uri: https://github.com/stoplightio/spectral